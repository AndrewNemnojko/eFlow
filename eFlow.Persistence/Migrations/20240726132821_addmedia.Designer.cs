// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eFlow.Persistence;

#nullable disable

namespace eFlow.Persistence.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20240726132821_addmedia")]
    partial class addmedia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BouquetEntityFlowerEntity", b =>
                {
                    b.Property<Guid>("BouquetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlowersId")
                        .HasColumnType("uuid");

                    b.HasKey("BouquetsId", "FlowersId");

                    b.HasIndex("FlowersId");

                    b.ToTable("BouquetEntityFlowerEntity");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.BouquetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bouquets");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.BouquetSizeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BouquetEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BouquetEntityId");

                    b.ToTable("BouquetSizeEntity");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.FlowerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uuid");

                    b.Property<int>("InStock")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.FlowerQuantityEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BouquetSizeEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlowerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BouquetSizeEntityId");

                    b.HasIndex("FlowerId");

                    b.ToTable("FlowerQuantityEntity");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.MediaFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BouquetSizeEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BouquetSizeEntityId");

                    b.ToTable("MediaFileEntity");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BouquetEntityFlowerEntity", b =>
                {
                    b.HasOne("eFlow.Persistence.Entities.BouquetEntity", null)
                        .WithMany()
                        .HasForeignKey("BouquetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eFlow.Persistence.Entities.FlowerEntity", null)
                        .WithMany()
                        .HasForeignKey("FlowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.BouquetSizeEntity", b =>
                {
                    b.HasOne("eFlow.Persistence.Entities.BouquetEntity", null)
                        .WithMany("Sizes")
                        .HasForeignKey("BouquetEntityId");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.FlowerEntity", b =>
                {
                    b.HasOne("eFlow.Persistence.Entities.MediaFileEntity", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.FlowerQuantityEntity", b =>
                {
                    b.HasOne("eFlow.Persistence.Entities.BouquetSizeEntity", null)
                        .WithMany("Flowers")
                        .HasForeignKey("BouquetSizeEntityId");

                    b.HasOne("eFlow.Persistence.Entities.FlowerEntity", "Flower")
                        .WithMany()
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.MediaFileEntity", b =>
                {
                    b.HasOne("eFlow.Persistence.Entities.BouquetSizeEntity", null)
                        .WithMany("ImageFile")
                        .HasForeignKey("BouquetSizeEntityId");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.BouquetEntity", b =>
                {
                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("eFlow.Persistence.Entities.BouquetSizeEntity", b =>
                {
                    b.Navigation("Flowers");

                    b.Navigation("ImageFile");
                });
#pragma warning restore 612, 618
        }
    }
}
